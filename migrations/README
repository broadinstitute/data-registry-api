# Alembic Migrations

Alembic is a database migration tool associated with SqlAlchemy.
Since we use SQLAlchemy all over our codebases, it seemed natural to use it for migrations.

The purpose of database migrations is to put the database schema into source control.
The migrations generated by alembic can be run sequentially to rebuild the exact scheme to match the current API.

It can also aid in operating the API as close to zero downtime while allowing database changes easily.

# Operation

(1) run `alembic revision -m "description of the migration"` (don't make it too long, it's part of the filename)
(2) Go to `migrations/versions` and open the new file, it should be at the bottom as they are ordered by timestamp
(3) edit both the upgrade and downgrade bits
    e.g. CREATE TABLE records(...) in the upgrade, DROP TABLE records in the downgrade
(4) To apply the migration, run `alembic upgrade head`.
(5) To downgrade a migration (or more), run `alembic downgrade -<n>` where <n> is the number of migrations to revert

# Notes

(1) The downgrade is to revert, so be careful with changes not easily reverted (e.g. dropping a table or column)
(2) I just use raw SQL (see the first revision for an example) as it is simpler than the alembic ORM
(3) I would recommend, if possible, to always design commits to not impact the API
    (a) To remove a column:
        (i) First change the API to not use the column
        (ii) Then run the migration.
    (b) To add a column
        (i) To add a column, first change any API call to be agnostic to the additional column
        (ii) Run the migration
        (iii) Then change the API to use the additional column wherever needed
